// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movie;

#nullable disable

namespace Movie.Migrations
{
    [DbContext(typeof(ApplicationDbcontext))]
    partial class ApplicationDbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Movie.Models.hall", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.HasKey("id");

                    b.ToTable("hall");
                });

            modelBuilder.Entity("Movie.Models.movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("Movie.Models.reservations", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("reservedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("reservedseat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("showtime_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("showtime_id");

                    b.HasIndex("user_id");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("Movie.Models.seats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("servedhallId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("servedhallId");

                    b.ToTable("seats");
                });

            modelBuilder.Entity("Movie.Models.servedhall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("hall_id")
                        .HasColumnType("int");

                    b.Property<int>("movie_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("hall_id");

                    b.HasIndex("movie_id");

                    b.ToTable("servedhalls");
                });

            modelBuilder.Entity("Movie.Models.showtime", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("show_hall_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("show_hall_id");

                    b.ToTable("showtime");
                });

            modelBuilder.Entity("Movie.Models.showtimeseats", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<bool>("istaken")
                        .HasColumnType("bit");

                    b.Property<int>("seat_id")
                        .HasColumnType("int");

                    b.Property<int>("showtime_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("seat_id");

                    b.HasIndex("showtime_id");

                    b.ToTable("showtimeseats");
                });

            modelBuilder.Entity("Movie.Models.users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Movie.Models.reservations", b =>
                {
                    b.HasOne("Movie.Models.showtime", "showtime")
                        .WithMany("reservations")
                        .HasForeignKey("showtime_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.Models.users", "users")
                        .WithMany("reservations")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("showtime");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Movie.Models.seats", b =>
                {
                    b.HasOne("Movie.Models.servedhall", null)
                        .WithMany("seats")
                        .HasForeignKey("servedhallId");
                });

            modelBuilder.Entity("Movie.Models.servedhall", b =>
                {
                    b.HasOne("Movie.Models.hall", "hall")
                        .WithMany("servedhalls")
                        .HasForeignKey("hall_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.Models.movie", "movie")
                        .WithMany("hall")
                        .HasForeignKey("movie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hall");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("Movie.Models.showtime", b =>
                {
                    b.HasOne("Movie.Models.servedhall", "servedhall")
                        .WithMany("showtime")
                        .HasForeignKey("show_hall_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("servedhall");
                });

            modelBuilder.Entity("Movie.Models.showtimeseats", b =>
                {
                    b.HasOne("Movie.Models.seats", "seats")
                        .WithMany("showtimeseats")
                        .HasForeignKey("seat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.Models.showtime", "showtime")
                        .WithMany("showtimeseats")
                        .HasForeignKey("showtime_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("seats");

                    b.Navigation("showtime");
                });

            modelBuilder.Entity("Movie.Models.hall", b =>
                {
                    b.Navigation("servedhalls");
                });

            modelBuilder.Entity("Movie.Models.movie", b =>
                {
                    b.Navigation("hall");
                });

            modelBuilder.Entity("Movie.Models.seats", b =>
                {
                    b.Navigation("showtimeseats");
                });

            modelBuilder.Entity("Movie.Models.servedhall", b =>
                {
                    b.Navigation("seats");

                    b.Navigation("showtime");
                });

            modelBuilder.Entity("Movie.Models.showtime", b =>
                {
                    b.Navigation("reservations");

                    b.Navigation("showtimeseats");
                });

            modelBuilder.Entity("Movie.Models.users", b =>
                {
                    b.Navigation("reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
